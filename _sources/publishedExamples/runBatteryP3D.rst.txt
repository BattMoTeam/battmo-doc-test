
.. _runBatteryP3D:

Pseudo-Three-Dimensional (P3D) Lithium-Ion Battery Model
----------------------------------------------------------------------------
*Generated from runBatteryP3D.m*


This example demonstrates how to setup a P3D model of a Li-ion battery and run a simple simulation.

Import the required modules from MRST
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
load MRST modules

.. code-block:: matlab

  mrstModule add ad-core mrst-gui mpfa


Setup the properties of Li-ion battery materials and cell design
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
The properties and parameters of the battery cell, including the architecture and materials, are set using an instance of :class:`BatteryInputParams <Battery.BatteryInputParams>`. This class is used to initialize the simulation and it propagates all the parameters throughout the submodels. The input parameters can be set manually or provided in json format. All the parameters for the model are stored in the paramobj object.

.. code-block:: matlab

  jsonstruct = parseBattmoJson(fullfile('ParameterData', 'BatteryCellParameters', 'LithiumIonBatteryCell', 'lithium_ion_battery_nmc_graphite.json'));
  jsonstruct.include_current_collectors = false;
  paramobj = BatteryInputParams(jsonstruct);
  
  
  % We define some shorthand names for simplicity.
  ne      = 'NegativeElectrode';
  pe      = 'PositiveElectrode';
  co      = 'Coating';
  am      = 'ActiveMaterial';
  cc      = 'CurrentCollector';
  elyte   = 'Electrolyte';
  sep     = 'Separator';
  thermal = 'ThermalModel';
  ctrl    = 'Control';


Setup the geometry and computational mesh
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Here, we setup the 2D computational mesh that will be used for the simulation. The required discretization parameters are already included in the class BatteryGeneratorP3D.

.. code-block:: matlab

  gen = BatteryGeneratorP3D();
  
  % Now, we update the paramobj with the properties of the mesh.
  paramobj = gen.updateBatteryInputParams(paramobj);
  
  % change some of the values of the paramaters that were given in the json
  % file to other values. This is done directly on the object paramobj.
  paramobj.(ne).(cc).effectiveElectronicConductivity = 1e5;
  paramobj.(pe).(cc).effectiveElectronicConductivity = 1e5;


Initialize the battery model.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
The battery model is initialized by sending paramobj to the Battery class constructor. see :class:`Battery <Battery.Battery>`.

.. code-block:: matlab

  model = Battery(paramobj);


Plot the mesh
^^^^^^^^^^^^^

.. code-block:: matlab

  plotBatteryMesh(model, 'setstyle', false);

.. figure:: runBatteryP3D_01.png
  :figwidth: 100%


Compute the nominal cell capacity and choose a C-Rate
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
The nominal capacity of the cell is calculated from the active materials. This value is then combined with the user-defined C-Rate to set the cell operational current.

.. code-block:: matlab

  C      = computeCellCapacity(model);
  CRate  = 1;
  inputI = (C/hour)*CRate; % current


Setup the time step schedule
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Smaller time steps are used to ramp up the current from zero to its operational value. Larger time steps are then used for the normal operation.

.. code-block:: matlab

  n           = 25;
  dt          = [];
  dt          = [dt; repmat(0.5e-4, n, 1).*1.5.^(1:n)'];
  totalTime   = 1.4*hour/CRate;
  n           = 40;
  dt          = [dt; repmat(totalTime/n, n, 1)];
  times       = [0; cumsum(dt)];
  tt          = times(2 : end);
  step        = struct('val', diff(times), 'control', ones(numel(tt), 1));


Setup the operating limits for the cell
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
The maximum and minimum voltage limits for the cell are defined using stopping and source functions. A stopping function is used to set the lower voltage cutoff limit. A source function is used to set the upper voltage cutoff limit.

.. code-block:: matlab

  control = model.(ctrl).setupScheduleControl();
  
  control.stopFunction = @(model, state, state_prev) (state.(ctrl).E < 2.0);
  
  % This control is used to set up the schedule
  schedule = struct('control', control, 'step', step);


Setup the initial state of the model
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
The initial state of the model is dispatched using the model.setupInitialState()method.

.. code-block:: matlab

  initstate = model.setupInitialState();


Setup the properties of the nonlinear solver
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: matlab

  nls = NonLinearSolver();
  % Change default maximum iteration number in nonlinear solver
  nls.maxIterations = 10;
  % Change default behavior of nonlinear solver, in case of error
  nls.errorOnFailure = false;
  % Timestep selector
  nls.timeStepSelector = StateChangeTimeStepSelector('TargetProps', {{ctrl, 'E'}}, ...
                                                    'targetChangeAbs', 0.03);
  
  % Change default tolerance for nonlinear solver
  model.nonlinearTolerance = 1e-5;
  % Set verbosity of the solver (if true, value of the residuals for every equation is given)
  model.verbose = true;


Run simulation
^^^^^^^^^^^^^^

.. code-block:: matlab

  [wellSols, states, report] = simulateScheduleAD(initstate, model, schedule, ...
                                                  'OutputMinisteps', true, ...
                                                  'NonLinearSolver', nls);


Process output and recover the output voltage and current from the output states.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: matlab

  ind = cellfun(@(x) not(isempty(x)), states);
  states = states(ind);
  E = cellfun(@(x) x.(ctrl).E, states);
  I = cellfun(@(x) x.(ctrl).I, states);
  time = cellfun(@(x) x.time, states);
  
  figure
  plot(time/hour, E);
  grid on
  xlabel 'time  / h';
  ylabel 'potential  / V';

.. figure:: runBatteryP3D_02.png
  :figwidth: 100%


Plot an animated summary of the results
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: matlab

  doplot = false;
  if doplot
      plotDashboard(model, states, 'step', 0);
  end



complete source code can be found :ref:`here<runBatteryP3D_source>`
